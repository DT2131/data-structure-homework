#include <bits/stdc++.h>
using namespace std;
const int MAXN=1e5+10;
template <class Type>
class Queue{
    Type elem[MAXN];
    int head=-1,tail=-1;
public:
    void clear(){
        head=tail=-1;
    }
    void push(Type str){
        elem[++tail]=str;
    }
    Type front(){
        return elem[head+1];
    }
    bool empty(){
        return head==tail?1:0;
    }
    void pop(){
        head++;
    }
    void traval(){
        for(int i=head+1;i<=tail;i++)
            cout<<elem[i]<<endl;
    }
};
template <class Type>
class Stack{
    Type elem[MAXN];
    int head=-1;
public:
    void push(Type str){
        elem[++head]=str;
    }
    bool empty(){
        return head==-1?1:0;
    }
    Type top(){
        return elem[head];
    }
    void pop(){
        head--;
    }
    void traval(){
        for(int i=head;i>=0;i--) cout<<elem[i]<<endl;
    }
    void clear(){
        head=-1;
    }
};
int priority[129];
Queue <char> sque;
Queue <double> dque;
Stack <char> ssta;
Stack <double> dsta;
bool innum;bool cut;
double num;int cnt,cnnt;
bool order[MAXN];
void divide(string str){
    str+="@";
    int len=str.size();
    for(int i=0;i<len;i++){
        if(str[i]<='9'&&str[i]>='0'){
            innum=1;
            num*=10;
            num+=str[i]-'0';
            if(cut) cnt*=10;
        }else if(str[i]=='.'){
            cut=1;
        }else{
            if(innum){dque.push(num/cnt);innum=0;cnt=1;cut=0;num=0;order[++cnnt]=0;}
            char temp;
            if(str[i]=='+'||str[i]=='-'||str[i]=='/'||str[i]=='*'||str[i]=='('||str[i]==')'||str[i]=='^'||str[i]=='@'){
                temp=str[i];
            }else if(str[i]=='l'){
                temp='l';
                i++;
            }else if(str[i]=='s'){
                temp='s';
                i+=3;
            }
            sque.push(temp);
            order[++cnnt]=1;
        }
    }
    //dque.traval();
    //sque.traval();
}
void ini(){
    dque.clear();
    dsta.clear();
    sque.clear();
    ssta.clear();
    memset(order,0,sizeof(order));
    priority['@']=-1;
    priority['(']=priority[')']=0;
    priority['+']=priority['-']=1;
    priority['*']=priority['/']=2;
    priority['^']=3;
    priority['s']=priority['l']=4;
    innum=0;cut=0;
    num=0;cnt=1;cnnt=-1;
}
void cal(){
    char x=ssta.top();
    ssta.pop();
    if(x=='s'||x=='l'){
        double x1=dsta.top();
        dsta.pop();
        if(x=='s')
            dsta.push(sqrt(x1));
        else dsta.push(log(x1));
    }else{
        double x2=dsta.top();
        dsta.pop();
        double x1=dsta.top();
        dsta.pop();
        if(x=='+'){
            dsta.push(x1+x2);
        }else if(x=='-'){
            dsta.push(x1+x2);
        }else if(x=='*'){
            dsta.push(x1*x2);
        }else if(x=='/'){
            dsta.push(x1/x2);
        }else if(x=='^'){
            dsta.push(pow(x1,x2));
        }
    }
}

int main(){
    while(1){
        ini();
        string str;
        cin>>str;
        divide(str);
        int ppp;
        for(int i=0;i<=cnnt;i++){
            if(!order[i]){
                dsta.push(dque.front());
                dque.pop();
            }else{
                char now=sque.front();
                sque.pop();
                if(now=='@')
                    ppp++;
                while(!ssta.empty()&&now!='('){
                    char pos=ssta.top();
                    if(pos=='('&&now==')'){
                        ssta.pop();
                        break;
                    }
                    if(priority[pos]>=priority[now]) cal();
                    else
                        break;
                }
                if(now!=')') ssta.push(now);
            }
        }
        cout<<dsta.top()<<endl;
    }
}

